<div id="scoreboard">
  <div class="player">
    <h1>Player</h1>
    <b>0</b>
  </div>
  <div class="ai">
    <h1>Opponent</h1>
    <b>0</b>
  </div>
</div>
<canvas id="canvas"></canvas>


html



html, body {
  background-color: #000;
}
canvas {
  position: absolute;
  margin: 0 auto;
  top: 5;
  left: 0;
  right: 0;
  border: 1px solid #fff;
}
#scoreboard {
  display: flex;
  justify-content: space-around;
  width: 750px;
  margin: 10px auto;
  color: #e2e2e2;
  
  h1, b {
    display: block;
    text-align: center;
    font-size: 24px;
  }
}



css




var width = 800
const height = 400
const pi = Math.PI
const UpArrow = 38
const DownArrow = 40
let playerScore = 0
let aiScore = 0

let canvas, ctx, keystate, player, ai, ball;

player = {
  x: null,
  y: null,
  height: 100,
  width: 20,
  
  update: function() {
    if (keystate[UpArrow] && this.y > 0) this.y -= 7
    if (keystate[DownArrow] && (this.y + this.height) < height) this.y += 7
  },
  
  draw: function() {
    ctx.fillRect(this.x, this.y, this.width, this.height)
  }
}
ai = {
  x: null,
  y: null,
  height: 100,
  width: 20,
  
  update: function() {
    let ballPos = (ball.y + (ball.side/2) - (this.height / 2))
    if (ballPos > this.y) {
      this.y += 1.5
    } else if (ballPos < this.y) {
      this.y -= 1.5
    }
  },
  
  draw: function() {
    ctx.fillRect(this.x, this.y, this.width, this.height)
  }
}
ball = {
  x: null,
  y: null,
  vel: null,
  speed: 10,
  side: 20,
  
  update: function() {
    this.x += this.vel.x
    this.y += this.vel.y
    
    if (0 > this.y || this.y + this.side > height) {
      this.vel.y *= -1
    }
    
    var shouldBounce = function(ax, ay, aw, ah, bx, by, bw, bh) {
      return ax < bx+bw && ay < by+bh && bx < ax+aw && by < ay+ah
    }
    
    var padel = this.vel.x < 0 ? player : ai
    if (shouldBounce(padel.x, padel.y, padel.width, padel.height, this.x, this.y, this.side, this.side)) {
      let whereHit = (this.y + this.side - padel.y) / (padel.height + this.side)
      let phi = .25 * pi * (2 * whereHit - 1)
      this.vel.x = (padel === player ? 1 : -1) * this.speed * Math.cos(phi)
      this.vel.y = this.speed*Math.sin(phi)
    }
    if (this.x < 0) {
      aiScore++
      init()
    }
    if (this.x > canvas.width) {
      playerScore++
      init()
    }
  },
  
  draw: function() {
    ctx.fillRect(this.x, this.y, this.side, this.side)
  }
}

function main() {
  canvas = document.getElementById('canvas')
  canvas.width = width
  canvas.height = height
  ctx = canvas.getContext('2d')
  
  document.body.appendChild(canvas)
  
  keystate = {}
  document.addEventListener('keydown', (evt) => {
    keystate[evt.keyCode] = true
  })
  document.addEventListener('keyup', (evt) => {
    delete keystate[evt.keyCode]
  })
  
  init()
  
  var loop = function() {
    update()
    draw()
    
    window.requestAnimationFrame(loop, canvas)
  }
  
  window.requestAnimationFrame(loop, canvas)
}

function init() {
  player.x = player.width
  player.y = (height - player.height) / 2
  
  ai.x = width - (player.width + ai.width)
  ai.y = (height - ai.height) / 2
  
  ball.x = (width - ball.side) / 2
  ball.y = (height - ball.side) / 2
  ball.vel = {
    x: ball.speed,
    y: 0
  }
  $('.player b').html(playerScore)
  $('.ai b').html(aiScore)
}

function update() {
  player.update()
  ai.update()
  ball.update()
}

function draw() {
  ctx.fillRect(0, 0, width, height)
  ctx.save()
  ctx.fillStyle = '#ffffff'
  
  player.draw()
  ai.draw()
  ball.draw()
  
  let w = 4
  let x = (width - w) * 0.5
  let y = 0
  let step = height/20
  while (y < height) {
    ctx.fillRect(x, y+step*0.2, w, step*0.6)
    y += step
  }
  
  ctx.restore()
}

main()





js
